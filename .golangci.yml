run:
  timeout: 5m
  build-tags:
    #    - integration
    - unit
linters:
  disable-all: true
  enable:
    - asciicheck
    - bidichk
    - bodyclose
    - contextcheck
    # - cyclop
    # Measuring code complexity is hard. Cyclomatic complexity is doubtfully
    # a reliable metric for this purpose. Some problems are complex by nature
    # and therefore more cyclomatically complex code might actually be
    # simpler.

    # - depguard  # depguard is useless until it is properly configured
    - dogsled
    - dupl
    - durationcheck
    - errname
    - errcheck
    - errorlint
    - exhaustive
    # - exhaustivestruct
    # We frequently make use of zero-values and partial initialization.
    - exportloopref
    - forbidigo
    - forcetypeassert
    - funlen
    #    - gci
    - gochecknoglobals
    - gochecknoinits
    - gocognit
    - goconst
    - gocritic
    - gocyclo
    - godot
    # - godox
    # TODOs and FIXMEs function as a big warning sign: "Beware! This code has
    # bugs and other problems. Be careful not to make things worse when
    # editing. Or better fix the issues before implementing a new feature on
    # top.". The idea of [`godox` comment
    # extractor](https://github.com/766b/godox) seems to be different from
    # the idea of [`godox` linter](https://github.com/matoous/godox). The
    # first one lets you quickly browse through the code problems, while the
    # second one asks you to remove that big warning sign in favor of tasks.
    # Though tasks are great, they will not help you while editing.
    - err113
    - gofmt
    # - gofumpt # disabled since conflicts with goland formatter
    - goheader
    # - goimports # disabled since conflicts with goland formatter
    - mnd
    - gomoddirectives
    - gomodguard
    - goprintffuncname
    - gosec
    - gosimple
    - govet
    - importas
    # - ireturn # See: https://github.com/go-proverbs/go-proverbs.github.io/issues/37.
    - ineffassign
    # - interfacer # Is prone to bad suggestions (officialy deprecated).
    - lll
    # - maligned # Replaced by `govet`'s `fieldalignment`
    - makezero
    - misspell
    - nakedret
    - nestif
    - nilnil # Zero-value of maps, slices and channels is `nil` but useful.
    - nilerr
    # - nlreturn # Too subjective.
    - noctx
    - nolintlint
    - paralleltest
    - prealloc
    - predeclared
    - promlinter
    - revive
    - rowserrcheck
    # - scopelint # Replaced by `exportloopref`.
    - sqlclosecheck
    - staticcheck
    - stylecheck
    - tagliatelle
    - tenv
    - testpackage
    - thelper
    - tparallel
    - unconvert
    - unparam
    # - varnamelen
    # Though the idea is idiomatic, the length is not the only thing that
    # determines whether a variable is "easy to use".
    - unused
    - wastedassign
    - whitespace
    # - wrapcheck # Is prone to bad suggestions (especially see issue #1).
    # - wsl # Too aggressive. Might be useful if it could do auto fix.

linters-settings:
  lll:
    line-length: 110
  #  gci:
  #    local-prefixes: <your go module>
  forbidigo:
    forbid:
      - os.Exit # it's not safe to exit in random places, because defer will not work.
      - log.Fatal.* # it calls os.Exit (see above)
  nilnil:
    checked-types: # [!] choose only types relative to your code base or disable this linter.
      - ptr
      - func
      - iface
  nolintlint:
    require-explanation: true # [!] it forces you to write explantion of //nolint comments.
    require-specific: true
  tagliatelle: # [!] configure it accordingly to your project rules.
    case:
      use-field-name: false
      rules:
        json: snake
        yaml: snake


# [!] Extremly useful section to disable some linters.
issues:
  exclude-rules:
    - path: (_test\.go|apitest)
      linters:
        - forcetypeassert # it's ok to have some type risks in tests
        - gosec # security is not make sense in tests
        - noctx # it's ok to do simple http request without context in tests
        - mnd
        - err113
        - ineffassign

    # Exclude lll issues for long lines with go:generate
    - linters:
        - lll
      source: "^//go:generate "

    # They are using same environment
    - path: tests/integration
      linters:
        - paralleltest

    # Init and New functions is a glue for service. They can be long, but simple.
    - linters:
        - funlen
      path: service\.go
      source: "Init|New"

    - path: main.go|.+_test.go
      linters:
        - gochecknoglobals

    # We allow to log.Fatal in main, tests, scripts and generators.
    - path: main.go|main_test.go|tests|scripts|internal/blueprint/generator/generator.go|build/dockergen.go
      linters:
        - forbidigo
      text: "forbidden by pattern `log.Fatal.*`"

    # We allow to os.Exit in main, tests, scripts and generators.
    - path: main.go|main_test.go|tests|scripts|internal/blueprint/generator/generator.go|build/dockergen.go
      linters:
        - forbidigo
      text: "forbidden by pattern `os.Exit`"

    # We have a lot of nil-tolerant types here.
    - path: <package with a lot of nil-tolerant types>
      linters:
        - nilnil

    # Should be fixed after full migration to generated config PLFM-616.
    - path: config.go
      linters:
        - unparam
      text: "newConfig - result 1 \\(error\\) is always nil"
// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package cmd_test is a generated GoMock package.
package cmd_test

import (
	context "context"
	cmd "github.com/burenotti/redis_impl/internal/domain/cmd"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockStorage is a mock of Storage interface
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// Set mocks base method
func (m *MockStorage) Set(ctx context.Context, key string, value interface{}, expiresAt *time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, value, expiresAt)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockStorageMockRecorder) Set(ctx, key, value, expiresAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockStorage)(nil).Set), ctx, key, value, expiresAt)
}

// Get mocks base method
func (m *MockStorage) Get(ctx context.Context, key string) (cmd.Value, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(cmd.Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockStorageMockRecorder) Get(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStorage)(nil).Get), ctx, key)
}

// Del mocks base method
func (m *MockStorage) Del(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Del", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Del indicates an expected call of Del
func (mr *MockStorageMockRecorder) Del(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockStorage)(nil).Del), ctx, key)
}

// StartTx mocks base method
func (m *MockStorage) StartTx(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTx", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartTx indicates an expected call of StartTx
func (mr *MockStorageMockRecorder) StartTx(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTx", reflect.TypeOf((*MockStorage)(nil).StartTx), ctx)
}

// RunTx mocks base method
func (m *MockStorage) RunTx(ctx context.Context) (*cmd.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunTx", ctx)
	ret0, _ := ret[0].(*cmd.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunTx indicates an expected call of RunTx
func (mr *MockStorageMockRecorder) RunTx(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunTx", reflect.TypeOf((*MockStorage)(nil).RunTx), ctx)
}

// DiscardTx mocks base method
func (m *MockStorage) DiscardTx(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DiscardTx", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DiscardTx indicates an expected call of DiscardTx
func (mr *MockStorageMockRecorder) DiscardTx(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiscardTx", reflect.TypeOf((*MockStorage)(nil).DiscardTx), ctx)
}

// Watch mocks base method
func (m *MockStorage) Watch(ctx context.Context, keys ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Watch", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Watch indicates an expected call of Watch
func (mr *MockStorageMockRecorder) Watch(ctx interface{}, keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockStorage)(nil).Watch), varargs...)
}

// Unwatch mocks base method
func (m *MockStorage) Unwatch(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unwatch", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unwatch indicates an expected call of Unwatch
func (mr *MockStorageMockRecorder) Unwatch(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unwatch", reflect.TypeOf((*MockStorage)(nil).Unwatch), ctx)
}

// MockValue is a mock of Value interface
type MockValue struct {
	ctrl     *gomock.Controller
	recorder *MockValueMockRecorder
}

// MockValueMockRecorder is the mock recorder for MockValue
type MockValueMockRecorder struct {
	mock *MockValue
}

// NewMockValue creates a new mock instance
func NewMockValue(ctrl *gomock.Controller) *MockValue {
	mock := &MockValue{ctrl: ctrl}
	mock.recorder = &MockValueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockValue) EXPECT() *MockValueMockRecorder {
	return m.recorder
}

// Value mocks base method
func (m *MockValue) Value() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Value")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Value indicates an expected call of Value
func (mr *MockValueMockRecorder) Value() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockValue)(nil).Value))
}

// ExpiresAt mocks base method
func (m *MockValue) ExpiresAt() *time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExpiresAt")
	ret0, _ := ret[0].(*time.Time)
	return ret0
}

// ExpiresAt indicates an expected call of ExpiresAt
func (mr *MockValueMockRecorder) ExpiresAt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpiresAt", reflect.TypeOf((*MockValue)(nil).ExpiresAt))
}

// Revision mocks base method
func (m *MockValue) Revision() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Revision")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// Revision indicates an expected call of Revision
func (mr *MockValueMockRecorder) Revision() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Revision", reflect.TypeOf((*MockValue)(nil).Revision))
}

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/burenotti/redis_impl/internal/domain/cmd (interfaces: Client,Storage)

// Package cmd_test is a generated GoMock package.
package cmd_test

import (
	context "context"
	cmd "github.com/burenotti/redis_impl/internal/domain/cmd"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// DiscardTx mocks base method
func (m *MockClient) DiscardTx(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DiscardTx", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DiscardTx indicates an expected call of DiscardTx
func (mr *MockClientMockRecorder) DiscardTx(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiscardTx", reflect.TypeOf((*MockClient)(nil).DiscardTx), arg0)
}

// ExecTx mocks base method
func (m *MockClient) ExecTx(arg0 context.Context) (*cmd.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecTx", arg0)
	ret0, _ := ret[0].(*cmd.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecTx indicates an expected call of ExecTx
func (mr *MockClientMockRecorder) ExecTx(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecTx", reflect.TypeOf((*MockClient)(nil).ExecTx), arg0)
}

// StartTx mocks base method
func (m *MockClient) StartTx(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTx", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartTx indicates an expected call of StartTx
func (mr *MockClientMockRecorder) StartTx(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTx", reflect.TypeOf((*MockClient)(nil).StartTx), arg0)
}

// Storage mocks base method
func (m *MockClient) Storage() cmd.Storage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Storage")
	ret0, _ := ret[0].(cmd.Storage)
	return ret0
}

// Storage indicates an expected call of Storage
func (mr *MockClientMockRecorder) Storage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Storage", reflect.TypeOf((*MockClient)(nil).Storage))
}

// Unwatch mocks base method
func (m *MockClient) Unwatch(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unwatch", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unwatch indicates an expected call of Unwatch
func (mr *MockClientMockRecorder) Unwatch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unwatch", reflect.TypeOf((*MockClient)(nil).Unwatch), arg0)
}

// Watch mocks base method
func (m *MockClient) Watch(arg0 context.Context, arg1 ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Watch", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Watch indicates an expected call of Watch
func (mr *MockClientMockRecorder) Watch(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockClient)(nil).Watch), varargs...)
}

// MockStorage is a mock of Storage interface
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// Del mocks base method
func (m *MockStorage) Del(arg0 context.Context, arg1 string) (cmd.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Del", arg0, arg1)
	ret0, _ := ret[0].(cmd.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Del indicates an expected call of Del
func (mr *MockStorageMockRecorder) Del(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockStorage)(nil).Del), arg0, arg1)
}

// Get mocks base method
func (m *MockStorage) Get(arg0 context.Context, arg1 string) (cmd.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(cmd.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockStorageMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStorage)(nil).Get), arg0, arg1)
}

// Set mocks base method
func (m *MockStorage) Set(arg0 context.Context, arg1 string, arg2 interface{}, arg3 *time.Time) (cmd.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(cmd.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Set indicates an expected call of Set
func (mr *MockStorageMockRecorder) Set(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockStorage)(nil).Set), arg0, arg1, arg2, arg3)
}

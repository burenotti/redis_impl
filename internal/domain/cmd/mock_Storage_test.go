// Code generated by mockery v2.43.2. DO NOT EDIT.

package cmd

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// MockStorage is an autogenerated mock type for the Storage type
type MockStorage struct {
	mock.Mock
}

type MockStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStorage) EXPECT() *MockStorage_Expecter {
	return &MockStorage_Expecter{mock: &_m.Mock}
}

// Del provides a mock function with given fields: ctx, key
func (_m *MockStorage) Del(ctx context.Context, key string) error {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Del")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStorage_Del_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Del'
type MockStorage_Del_Call struct {
	*mock.Call
}

// Del is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockStorage_Expecter) Del(ctx interface{}, key interface{}) *MockStorage_Del_Call {
	return &MockStorage_Del_Call{Call: _e.mock.On("Del", ctx, key)}
}

func (_c *MockStorage_Del_Call) Run(run func(ctx context.Context, key string)) *MockStorage_Del_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockStorage_Del_Call) Return(_a0 error) *MockStorage_Del_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorage_Del_Call) RunAndReturn(run func(context.Context, string) error) *MockStorage_Del_Call {
	_c.Call.Return(run)
	return _c
}

// DiscardTx provides a mock function with given fields: ctx
func (_m *MockStorage) DiscardTx(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for DiscardTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStorage_DiscardTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DiscardTx'
type MockStorage_DiscardTx_Call struct {
	*mock.Call
}

// DiscardTx is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockStorage_Expecter) DiscardTx(ctx interface{}) *MockStorage_DiscardTx_Call {
	return &MockStorage_DiscardTx_Call{Call: _e.mock.On("DiscardTx", ctx)}
}

func (_c *MockStorage_DiscardTx_Call) Run(run func(ctx context.Context)) *MockStorage_DiscardTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockStorage_DiscardTx_Call) Return(_a0 error) *MockStorage_DiscardTx_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorage_DiscardTx_Call) RunAndReturn(run func(context.Context) error) *MockStorage_DiscardTx_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, key
func (_m *MockStorage) Get(ctx context.Context, key string) (Value, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 Value
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (Value, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) Value); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Value)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorage_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockStorage_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockStorage_Expecter) Get(ctx interface{}, key interface{}) *MockStorage_Get_Call {
	return &MockStorage_Get_Call{Call: _e.mock.On("Get", ctx, key)}
}

func (_c *MockStorage_Get_Call) Run(run func(ctx context.Context, key string)) *MockStorage_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockStorage_Get_Call) Return(_a0 Value, _a1 error) *MockStorage_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorage_Get_Call) RunAndReturn(run func(context.Context, string) (Value, error)) *MockStorage_Get_Call {
	_c.Call.Return(run)
	return _c
}

// RunTx provides a mock function with given fields: ctx
func (_m *MockStorage) RunTx(ctx context.Context) (*Result, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for RunTx")
	}

	var r0 *Result
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*Result, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *Result); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Result)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorage_RunTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunTx'
type MockStorage_RunTx_Call struct {
	*mock.Call
}

// RunTx is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockStorage_Expecter) RunTx(ctx interface{}) *MockStorage_RunTx_Call {
	return &MockStorage_RunTx_Call{Call: _e.mock.On("RunTx", ctx)}
}

func (_c *MockStorage_RunTx_Call) Run(run func(ctx context.Context)) *MockStorage_RunTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockStorage_RunTx_Call) Return(_a0 *Result, _a1 error) *MockStorage_RunTx_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorage_RunTx_Call) RunAndReturn(run func(context.Context) (*Result, error)) *MockStorage_RunTx_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: ctx, key, value, expiresAt
func (_m *MockStorage) Set(ctx context.Context, key string, value interface{}, expiresAt *time.Time) error {
	ret := _m.Called(ctx, key, value, expiresAt)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, *time.Time) error); ok {
		r0 = rf(ctx, key, value, expiresAt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStorage_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type MockStorage_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - value interface{}
//   - expiresAt *time.Time
func (_e *MockStorage_Expecter) Set(ctx interface{}, key interface{}, value interface{}, expiresAt interface{}) *MockStorage_Set_Call {
	return &MockStorage_Set_Call{Call: _e.mock.On("Set", ctx, key, value, expiresAt)}
}

func (_c *MockStorage_Set_Call) Run(run func(ctx context.Context, key string, value interface{}, expiresAt *time.Time)) *MockStorage_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}), args[3].(*time.Time))
	})
	return _c
}

func (_c *MockStorage_Set_Call) Return(_a0 error) *MockStorage_Set_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorage_Set_Call) RunAndReturn(run func(context.Context, string, interface{}, *time.Time) error) *MockStorage_Set_Call {
	_c.Call.Return(run)
	return _c
}

// StartTx provides a mock function with given fields: ctx
func (_m *MockStorage) StartTx(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for StartTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStorage_StartTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartTx'
type MockStorage_StartTx_Call struct {
	*mock.Call
}

// StartTx is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockStorage_Expecter) StartTx(ctx interface{}) *MockStorage_StartTx_Call {
	return &MockStorage_StartTx_Call{Call: _e.mock.On("StartTx", ctx)}
}

func (_c *MockStorage_StartTx_Call) Run(run func(ctx context.Context)) *MockStorage_StartTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockStorage_StartTx_Call) Return(_a0 error) *MockStorage_StartTx_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorage_StartTx_Call) RunAndReturn(run func(context.Context) error) *MockStorage_StartTx_Call {
	_c.Call.Return(run)
	return _c
}

// Unwatch provides a mock function with given fields: ctx
func (_m *MockStorage) Unwatch(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Unwatch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStorage_Unwatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unwatch'
type MockStorage_Unwatch_Call struct {
	*mock.Call
}

// Unwatch is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockStorage_Expecter) Unwatch(ctx interface{}) *MockStorage_Unwatch_Call {
	return &MockStorage_Unwatch_Call{Call: _e.mock.On("Unwatch", ctx)}
}

func (_c *MockStorage_Unwatch_Call) Run(run func(ctx context.Context)) *MockStorage_Unwatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockStorage_Unwatch_Call) Return(_a0 error) *MockStorage_Unwatch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorage_Unwatch_Call) RunAndReturn(run func(context.Context) error) *MockStorage_Unwatch_Call {
	_c.Call.Return(run)
	return _c
}

// Watch provides a mock function with given fields: ctx, keys
func (_m *MockStorage) Watch(ctx context.Context, keys ...string) error {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Watch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ...string) error); ok {
		r0 = rf(ctx, keys...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStorage_Watch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Watch'
type MockStorage_Watch_Call struct {
	*mock.Call
}

// Watch is a helper method to define mock.On call
//   - ctx context.Context
//   - keys ...string
func (_e *MockStorage_Expecter) Watch(ctx interface{}, keys ...interface{}) *MockStorage_Watch_Call {
	return &MockStorage_Watch_Call{Call: _e.mock.On("Watch",
		append([]interface{}{ctx}, keys...)...)}
}

func (_c *MockStorage_Watch_Call) Run(run func(ctx context.Context, keys ...string)) *MockStorage_Watch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockStorage_Watch_Call) Return(_a0 error) *MockStorage_Watch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorage_Watch_Call) RunAndReturn(run func(context.Context, ...string) error) *MockStorage_Watch_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStorage creates a new instance of MockStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStorage {
	mock := &MockStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
